# This is a GitHub Action workflow that automates building and releasing
# single-file Python executables for Windows, macOS, and Linux.

name: "üì¶ Build and Release Executables"

# This workflow is triggered whenever a new release is created on GitHub.
on:
  release:
    types: [created]

jobs:
  build:
    # The name of the job displayed on GitHub. It's dynamic based on the OS.
    name: "üî® Build on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]

    steps:
      - name: "üìÇ Check out repository"
        uses: actions/checkout@v4

      - name: "üêç Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: "üß© Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          # Installs dependencies from requirements.txt if it exists.
          # It's good practice to list your project's dependencies in this file.
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
        shell: bash

      - name: "üè∑Ô∏è Set executable name and extension"
        id: set-names
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "EXECUTABLE_NAME=install-all-google-fonts-windows" >> $GITHUB_ENV
            echo "ASSET_NAME=install-all-google-fonts-windows.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo "EXECUTABLE_NAME=install-all-google-fonts-macos" >> $GITHUB_ENV
            echo "ASSET_NAME=install-all-google-fonts-macos" >> $GITHUB_ENV
          else
            echo "EXECUTABLE_NAME=install-all-google-fonts-linux" >> $GITHUB_ENV
            echo "ASSET_NAME=install-all-google-fonts-linux" >> $GITHUB_ENV
          fi
        shell: bash

      - name: "‚öôÔ∏è Build executable with PyInstaller"
        run: |
          # For GUI applications, you might want to add the '--windowed' or '--noconsole' flag.
          pyinstaller --onefile --name ${{ env.EXECUTABLE_NAME }} main.py
      
      - name: '‚ûï Add execute permission'
        if: runner.os != 'Windows'
        run: chmod +x dist/${{ env.EXECUTABLE_NAME }}

      - name: "üì§ Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: dist/${{ env.ASSET_NAME }}
  
  # This job runs after the 'build' job to test the executables.
  test:
    name: 'üß™ Test on ${{ matrix.os }}'
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    # Determine the name of the artifact to download.
    - name: 'üè∑Ô∏è Set executable name'
      id: set-names
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          echo "ASSET_NAME=install-all-google-fonts-windows.exe" >> $GITHUB_ENV
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "ASSET_NAME=install-all-google-fonts-macos" >> $GITHUB_ENV
        else
          echo "ASSET_NAME=install-all-google-fonts-linux" >> $GITHUB_ENV
        fi
      shell: bash

    # Download the correct artifact for the current OS.
    - name: 'üì• Download artifact'
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ASSET_NAME }}
    
    - name: 'üì• Download sample font for testing'
      run: curl -L -o "TestFont.ttf" "https://github.com/google/fonts/raw/refs/heads/main/ofl/poppins/Poppins-Black.ttf"
      shell: bash
    
    - name: '‚ûï Add execute permission'
      if: runner.os != 'Windows'
      run: chmod +x ./${{ env.ASSET_NAME }}

    # Run the executable to ensure it doesn't crash immediately.
    # For a more thorough test, you could add arguments like --help or --version
    # if your application supports them.
    - name: 'üö¶ Run executable test with elevated privileges'
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          ./${{ env.ASSET_NAME }}
        else
          sudo ./${{ env.ASSET_NAME }}
        fi
      shell: bash

  # This job runs after all 'build' jobs have successfully completed.
  upload-assets:
    name: "üöÄ Upload Assets to Release"
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: "üì• Download all artifacts"
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: "üìÑ List downloaded files"
        run: ls -R artifacts

      - name: "üéâ Upload assets to release"
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/install-all-google-fonts-linux/install-all-google-fonts-linux
            artifacts/install-all-google-fonts-windows.exe/install-all-google-fonts-windows.exe
            artifacts/install-all-google-fonts-macos/install-all-google-fonts-macos
          # This section appends a dynamic list of download links to your release notes.
          body: |
            ---
            ### ‚¨áÔ∏è Download Links
            * üêß **Linux**: [install-all-google-fonts-linux](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install-all-google-fonts-linux)
            * ü™ü **Windows**: [install-all-google-fonts-windows.exe](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install-all-google-fonts-windows.exe)
            * üçé **macOS**: [install-all-google-fonts-macos](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/install-all-google-fonts-macos)
        env:
          # The GITHUB_TOKEN is a special secret provided by GitHub Actions.
          # It's needed to authorize the upload to your release.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
